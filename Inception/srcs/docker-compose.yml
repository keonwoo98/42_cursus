# docker-compose : 여러 개의 컨테이너를 하나로 묶어주는 역할을 하는 툴
# yaml : yet another markup language -> yaml ain't markup language (보기 편하고 이해하기 쉬운 포맷)

version: "3"

services:

    nginx:
        image: nginx
        build:
            context: ./requirements/nginx
        container_name: nginx
        env_file:
            - .env
        depends_on:
            - wordpress
        ports:
            - "443:443"
        volumes:
            - wordpress_data:/var/www/html
        networks:
            - intra
        restart: always
        tty: true

    mariadb:
        image: mariadb
        build:
            context: ./requirements/mariadb
        container_name: mariadb
        env_file:
            - .env
        expose:
            - "3306"
        volumes:
            - db_data:/var/lib/mysql
        networks:
            - intra
        restart: always
        tty: true

    wordpress:
        image: wordpress
        build:
            context: ./requirements/wordpress
        container_name: wordpress
        env_file:
            - .env
        depends_on:
            - mariadb
        volumes:
            - wordpress_data:/var/www/html
        expose:
            - "9000"
        networks:
            - intra
        restart: always
        tty: true

networks:
    intra:
        driver: bridge

volumes:
    db_data:
        driver: local
        driver_opts:
            type: none
            device: /Users/keokim/data/mysql
            o: bind
    wordpress_data:
        driver: local
        driver_opts:
            type: none
            device: /Users/keokim/data/wordpress
            o: bind

# version : 컨테이너를 실행하기 위한 단위 (docker-compose version 명시)
# services : build할 dockerfile의 경로 지정 (서비스 정의)
# ports : 포트포워딩 지정
# volumes : 바인드 마운트, 볼륨 지정
# environment : 컨테이너에서 사용될 환경변수 설정
# depends_on : 실행순서를 보장받고 싶을 때 사용

# 문법(Version 3)
# version : 스키마 버전
#     최신 버전을 쓰는 것을 권장
#     버전 3 이후에는 버전을 쓰지 않는 것 같은데 잘 모르겠다 (참고)
#     예시 튜토리얼 같은 곳에서는 버전 3.9를 명시하고 있음
# services : 애플리케이션을 구성할 서비스 목록 (컨테이너를 실행할 때 필요한 정보 명시)
#     서비스 이름 (아래의 목록은 순서가 상관없음)
#         build : 빌드할 Dockerfile의 경로
#         image : 컨테이너를 올릴 때 사용할 이미지
#         command : 컨테이너에서 수행할 명령어
#         ports : 포트 정의
#         working_dir : 작업할 경로
#         container_name : 컨테이너 이름
#         volumes : 마운트할 볼륨 (상대 경로 사용 가능)
#         environment : 환경변수
#         networks : 사용할 네트워크 정의
# volumes : 미리 생성해두고 컨테이너에서 불러와서 사용할 볼륨
#     볼륨 이름 (볼륨 이름만 명시하면 기본 옵션을 사용)
#     driver
#     driver_opts 드라이버 옵션 설정, 리눅스의 mount 실행과 동일 (참고)
# networks : 컨테이너 간 네트워크 설정
#     네트워크 이름


# docker-compose CLI 명령어
# docker-compose up : 실행
# docker-compose up -d : 백그라운드에서 실행
# docker-compose stop : 서비스 중지
# docker-compose down : 서비스 다운
# docker-compose down --volumes : 서비스 다운 후 볼륨삭제
# docker-compose config : 컨피그 확인하기
# docker exec <서비스이름> <명령어> : 실행중인 서비스 컨테이너 명령어 실행하기
# docker-compose ps : 실행중인 서비스 확인하기
# docker-compose logs : 서비스 로그 확인하기
# docker-compose logs -f : 서비스 로그 지속적으로 프린트하기
# docker-compose logs <서비스이름> : 서비스 로그 지정해서 확인하기
# docker-compose logs <서비스이름> <서비스이름> ... : 서비스 로그 여러개 지정해서 확인하기
